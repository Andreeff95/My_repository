def Py_Sem():
    task = input('Введите номер задания. Для закрытия программы введите "0": ')
    match task:
        case "0": print('Закрытие программы...')
        case "1": Task1()
        case "2": Task2()
        case "3": Task3()
        case "4": Task4()
        case "5": Task5()
        case "6": Task6()
        case "7": Task7()
        case "8": Task8()
        case "9": Task9()
        case "10": Task10()
        case "11": Task11()
        case "12": Task12()
        case "13": Task13()
        case "14": Task14()
        case "15": Task15()
        case "16": Task16()
        case "17": Task17()
        case "18": Task18()
        case "19": Task19()
        case "20": Task20()
        case "21": Task21()
        case "23": Task23()
        case _:
            print('Неверный номер задачи!')
            Py_Sem()

def Task1():
    """
    За день машина проезжает n километров. Сколько
    дней нужно, чтобы проехать маршрут длиной m
    километров?
    Input: n = 700 m = 750
    Output: 2
    """
    print('ЗАДАЧА 1')
    import math
    n = int(input('Введите n: '))
    m = int(input('Введите m: '))
    print(math.ceil(m/n))
    Py_Sem()
def Task2():
    """
    Найдите сумму цифр трехзначного числа.
    Input: 123 
    Output: 6 
    """
    print('ЗАДАЧА 2')
    def sum_rec(x: int):
        return x if x == 0 else ((x % 10) + sum_rec(x//10))
    num = int(input('Введите число: '))
    print(sum_rec(num))
    Py_Sem()
def Task3():
    """
    В некоторой школе решили набрать три новых
    математических класса и оборудовать кабинеты для
    них новыми партами. За каждой партой может сидеть
    два учащихся. Известно количество учащихся в
    каждом из трех классов. Выведите наименьшее
    число парт, которое нужно приобрести для них.
    Input: 20 21 22
    Output: 32
    """
    print('ЗАДАЧА 3')
    import math
    num1 = int(input('Введите первое число: '))
    num2 = int(input('Введите второе число: '))
    num3 = int(input('Введите третье число: '))
    print(math.ceil(num1/2)+math.ceil(num2/2)+math.ceil(num3/2))
    Py_Sem()
def Task4():
    """
    Петя, Катя и Сережа делают из бумаги журавликов. Вместе
    они сделали S журавликов. Сколько журавликов сделал каждый
    ребенок, если известно, что Петя и Сережа сделали одинаковое
    количество журавликов, а Катя сделала в два раза больше журавликов,
    чем Петя и Сережа вместе?
    Input: 24 
    Output: 4 16 4
    """
    print('ЗАДАЧА 4')
    sum = int(input('Введите количество журавликов: '))
    Kat = sum//3*2
    Pet = Ser = Kat//4
    print(f"{sum} -> {Pet} {Kat} {Ser}" if sum%6==0 
          else 'Невозможно целочисленно распределить журавлики.')
    Py_Sem()
def Task5():
    """
    Вагоны в электричке пронумерованы натуральными
    числами, начиная с 1 (при этом иногда вагоны
    нумеруются от «головы» поезда, а иногда – с
    «хвоста»; это зависит от того, в какую сторону едет
    электричка). В каждом вагоне написан его номер.
    Витя сел в i-й вагон от головы поезда и обнаружил,
    что его вагон имеет номер j. Он хочет определить,
    сколько всего вагонов в электричке. Напишите
    программу, которая будет это делать или сообщать,
    что без дополнительной информации это сделать
    невозможно.
    Input: 3 4
    Output: 6
    """
    print('ЗАДАЧА 5')
    i = int(input('Введите i: '))
    j = int(input('Введите j: '))
    print((i+j-1) if (i+j-1)>0 
          else 'Невозможно определить количество вагонов')
    Py_Sem()
def Task6():
    """
    Вы пользуетесь общественным транспортом? Вероятно, вы
    расплачивались за проезд и получали билет с номером. Счастливым
    билетом называют такой билет с шестизначным номером, где сумма
    первых трех цифр равна сумме последних трех. Т.е. билет с номером
    385916 – счастливый, т.к. 3+8+5=9+1+6. Вам требуется написать
    программу, которая проверяет счастливость билета.
    Input: 385916 
    Output: yes
    """
    print('ЗАДАЧА 6')
    ticket = input('Введите шестизначный номер билета: ')
    if len(ticket) == 6:
        print('yes' if (int(ticket[0])+int(ticket[1])+int(ticket[2]))
              == (int(ticket[-1])+int(ticket[-2])+int(ticket[-3]))
              else 'no')
    else: 
        print('Неверное количество цифр!')
        Task6()
    Py_Sem()
def Task7():
    """
    Дано натуральное число. Требуется определить,
    является ли год с данным номером високосным. Если
    год является високосным, то выведите YES, иначе
    выведите NO. Напомним, что в соответствии с
    григорианским календарем, год является
    високосным, если его номер кратен 4, но не кратен
    100, а также если он кратен 400.
    Input: 2016
    Output: YES
    """
    print('ЗАДАЧА 7')
    year = int(input('Введите год: '))
    print('YES' if (year % 400 == 0) 
                or ((year % 4 == 0) and (year % 100 != 0))
                else 'NO')
    Py_Sem()
def Task8():
    """
    Требуется определить, можно ли от шоколадки размером n * m 
    долек отломить k долек, если разрешается сделать один разлом по
    прямой между дольками (то есть разломить шоколадку на два
    прямоугольника).
    Input: 3 2 4 
    Output: yes
    """
    print('ЗАДАЧА 8')
    n = int(input('Введите число n: '))
    m = int(input('Введите число m: '))
    k = int(input('Введите число k: '))
    print('yes' if (k%n==0 or k%m==0) else 'no')
    Py_Sem()
def Task9():
    """
    По данному целому неотрицательному n вычислите
    значение n!. N! = 1 * 2 * 3 * … * N (произведение всех
    чисел от 1 до N) 0! = 1 *Решить задачу используя цикл while*
    Input: 5
    Output: 120
    """
    print("ЗАДАЧА 9")
    n = int(input("Введите число N: "))
    if n == 0: print(1)
    else:
        count = 1
        res = 1
        while (count<=n):
            res*=count
            count+=1
        print(res)
    Py_Sem()
def Task10():
    """
    На столе лежат n монеток. Некоторые из них лежат вверх
    решкой, а некоторые – гербом. Определите минимальное число
    монеток, которые нужно перевернуть, чтобы все монетки были
    повернуты вверх одной и той же стороной. Выведите минимальное
    количество монет, которые нужно перевернуть.
    Input: 5 -> 1 0 1 1 0
    Output: 2
    """    
    from random import randint
    print("ЗАДАЧА 10")
    N = int(input("Введите количество монеток: "))
    heads = 0
    tails = 0
    for i in range(N):
        coin = randint(0, 1)
        print(coin, end=" ")
        if coin==1: heads+=1
        else: tails+=1 
    print()
    print(heads if heads<tails else tails)
    Py_Sem()
def Task11():
    """
    Дано натуральное число A > 1. Определите, каким по
    cчету числом Фибоначчи оно является, то есть
    выведите такое число n, что φ(n)=A. Если А не
    является числом Фибоначчи, выведите число -1.
    Input: 5
    Output: 6 
    """
    print("ЗАДАЧА 11")
    A = int(input("Введите число больше 1: "))
    flag = -1
    fib1, fib2 = 0, 1
    step = 2
    while (fib2 <= A):
        if fib2==A: 
            flag = step
            break
        else:
            fib1, fib2 = fib2, (fib1+fib2)
            step+=1
    print(flag)
    Py_Sem()
def Task12():
    """
    Петя и Катя – брат и сестра. Петя – студент, а Катя –
    школьница. Петя помогает Кате по математике. Он задумывает два
    натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. Для
    этого Петя делает две подсказки. Он называет сумму этих чисел S и их
    произведение P. Помогите Кате отгадать задуманные Петей числа.
    Input: 5 6
    Output: 2 3
    """
    import math
    print("ЗАДАЧА 12")
    S = int(input("Введите сумму чисел X и Y: "))
    P = int(input("Введите произведение чисел X и Y: "))
    # P = x*y = x*(S-y)
    # P = -x**2 + S*x + 0
    # x**2 - S*x + P = 0
    D = (-S)**2-4*P
    if D < 0:
        print(f"S:{S} P:{P} -> решения для целых чисел нет")
    elif D==0:
        x = y = S/2
        if (int(x)==x and int(y)==y):
            print(f"S:{S} P:{P} -> x:{x} y:{y}")
        else:
            print(f"S:{S} P:{P} -> решения для целых чисел нет")
    else:
        x = (S+math.sqrt(D))/2
        if x<0: 
            x = (S-math.sqrt(D))/2
        y = S-x
        if (int(x)==x and int(y)==y):
            print(f"S:{S} P:{P} -> x:{x} y:{y}")
        else:
            print(f"S:{S} P:{P} -> решения для целых чисел нет")
    Py_Sem()    
def Task13():
    """
    Уставшие от необычно теплой зимы, жители решили узнать,
    действительно ли это самая длинная оттепель за всю историю
    наблюдений за погодой. Они обратились к синоптикам, а те, в
    свою очередь, занялись исследованиями статистики за
    прошлые годы. Их интересует, сколько дней длилась самая
    длинная оттепель. Оттепелью они называют период, в
    который среднесуточная температура ежедневно превышала
    0 градусов Цельсия. Напишите программу, помогающую
    синоптикам в работе.
    Пользователь вводит число N – общее количество
    рассматриваемых дней (1 ≤ N ≤ 100). В следующих строках
    располагается N целых чисел.
    Каждое число – среднесуточная температура в
    соответствующий день. Температуры – целые числа и лежат в
    диапазоне от –50 до 50
    Input: 6 -> -20 30 -40 50 10 -10
    Output: 2
    """     
    print("ЗАДАЧА 13")
    N = int(input("Введите число от 1 до 100: "))
    max_days = 0
    combo = 0
    if 1 <= N <= 100:
        for i in range(1, N+1):
            temp = int(input(f"Введите среднюю температуру в {i} день: "))
            if temp > 0: 
                combo+=1
            else: 
                combo=0
            if combo > max_days: max_days = combo 
        print(max_days)
    else: print("Введено неверное число")
    Py_Sem()
def Task14():
    """
    Требуется вывести все целые степени двойки (т.е. числа
    вида 2**k), не превосходящие числа N.
    Input: 10
    Output: 1 2 4 8
    """
    print("ЗАДАЧА 14")
    N = int(input("Введите число N: "))
    if N==0: print(f"{N} -> нет решения")
    else:
        print(f"{N} ->", end=" ")
        degree = 0
        while(2**degree<=N):
            print(2**degree, end=" ")
            degree+=1
        print()
    Py_Sem()
def Task15():
    """
    Иван Васильевич пришел на рынок и решил
    купить два арбуза: один для себя, а другой для тещи.
    Понятно, что для себя нужно выбрать арбуз
    потяжелей, а для тещи полегче. Но вот незадача:
    арбузов слишком много и он не знает как же выбрать
    самый легкий и самый тяжелый арбуз? Помогите ему!
    Пользователь вводит одно число N – количество
    арбузов. Вторая строка содержит N чисел,
    записанных на новой строчке каждое. Здесь каждое
    число – это масса соответствующего арбуза
    Input: 5 -> 5 1 6 5 9
    Output: 1 9
    """
    print("ЗАДАЧА 15")
    N = int(input("Введите количество арбузов: "))
    weight = int(input("Введите вес 1 арбуза: "))
    min, max = weight, weight
    for i in range(2, N+1):
        weight = int(input(f"Введите вес {i} арбуза: "))
        if weight < min: min = weight 
        if weight > max: max = weight 
    print(min, max)
    Py_Sem()
def Task16():
    """
    Требуется вычислить, сколько раз встречается некоторое
    число X в массиве A[1..N]. Пользователь в первой строке вводит
    натуральное число N – количество элементов в массиве. В последующих
    строках записаны N целых чисел A. Последняя строка содержит число X
    Input: 5, 1 2 3 4 5, 3
    Output: 1
    """
    print("ЗАДАЧА 16")
    list = []
    N = int(input("Введите количество элементов в массиве: "))
    for i in range(N):
        list.append(int(input(f"Введите {i+1} число: "))) 
    X = int(input("Введите число X: "))
    total = 0
    for item in list:
        total+=1 if item == X else 0
    print(total)
    Py_Sem()
def Task17():
    """
    Дан список чисел. Определите, сколько в нем
    встречается различных чисел.
    Input: [1, 1, 2, 0, -1, 3, 4, 4]
    Output: 6
    """
    print("ЗАДАЧА 17")
    from random import randint
    list_1 = [randint(-5, 5) for i in range(8)]
    print(list_1)
    print(len(set(list_1)))
    Py_Sem()
def Task18():
    """
    Требуется найти в массиве A[1..N] самый близкий по
    величине элемент к заданному числу X. Пользователь в первой строке
    вводит натуральное число N – количество элементов в массиве. В
    последующих строках записаны N целых чисел A. Последняя строка
    содержит число X
    Input: 5, 1 2 3 4 5, 6
    Output: 5
    """
    print("ЗАДАЧА 18")
    list = []
    N = int(input("Введите количество элементов в массиве: "))
    for i in range(N):
        list.append(int(input(f"Введите {i+1} число: "))) 
    X = int(input("Введите число X: "))
    elem = list[0]
    diff = abs(X-list[0])
    for item in list:
        if abs(X-item)<diff:
            elem = item
            diff = abs(X-item)
    print(elem)
    Py_Sem()
def Task19():
    """
    Дан список чисел. Определите, сколько в нем
    встречается различных чисел.
    Input: [1, 1, 2, 0, -1, 3, 4, 4]
    Output: 6
    """
    print("ЗАДАЧА 19")
    from random import randint
    list_1 = [i for i in range(randint(5, 10))]
    print(list_1)
    k = int(input("Введите число k: "))
    list_2 = []
    for i in range(k, len(list_1)): list_2.append(list_1[i])
    for i in range(k): list_2.append(list_1[i])
    print(list_2)
    q = input('Если хотите решить задачу с помощью рекурсии, нажмите "1": ')
    match q:
        case "1": 
            def ShiftRec(list: list, x: int):
                if x == 0: return list
                temp = list[0]
                for i in range(len(list)-1):
                    list[i] = list[i+1]
                list[-1] = temp
                return ShiftRec(list, x-1)
            print(list_1)
            ShiftRec(list_1, k)
            print(list_1)
            Py_Sem() 
        case _: Py_Sem() 
def Task20():
    """
    В настольной игре Скрабл (Scrabble) каждая буква имеет определенную
    ценность. Напишите программу, которая вычисляет стоимость введенного пользователем слова.
    Будем считать, что на вход подается только одно слово, которое содержит либо только
    английские, либо только русские буквы.
    Input: ноутбук
    Output: 12
    """
    dict = {
        "a":1, "e":1, "i":1, "o":1, "u":1, "l":1, 
        "n":1, "s":1, "t":1, "r":1,
        "d":2, "g":2, "b":3, "c":3, "m":3, "p":3,
        "f":4, "h":4, "v":4, "w":4, "y":4, "k":5,
        "j":8, "x":8, "q":10, "z":10,
        "а":1, "в":1, "е":1, "и":1, "н":1, "о":1, "р":1, "с":1, "т":1,
        "д":2, "к":2, "л":2, "м":2, "п":2, "у":2,
        "б":3, "г":3, "ё":3, "ь":3, "я":3, "й":4, "ы":4,
        "ж":5, "з":5, "х":5, "ц":5, "ч":5,
        "ш":8, "э":8, "ю":8, "ф":10, "щ":10, "ъ":10
    }
    word = input("Введите слово: ")
    score = 0
    try:
        for char in word:
            score+=dict[char]
        print(score)
    except KeyError:
        print("Ошибка ввода!")
    finally:    
        Py_Sem()
def Task21():
    """
    Напишите программу для печати всех уникальных
    значений в словаре.
    Input: [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"},
    {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII
    ":" S007 "}]
    Output: {'S005', 'S002', 'S007', 'S001', 'S009'}
    """
    print("ЗАДАЧА 21")
    dict = [{"V": "S001"}, 
            {"V": "S002"}, 
            {"VI": "S001"},
            {"VI": "S005"}, 
            {"VII": "S005"}, 
            {"V": "S009"}, 
            {"VIII":"S007"}]
    list = []
    for item in dict:
        for k in item: 
            if item[k] in list: continue
            list.append(item[k])
    print(list)
    Py_Sem()
def Task23():
    """
    Дан массив, состоящий из целых чисел. Напишите
    программу, которая подсчитает количество
    элементов массива, больших предыдущего (элемента
    с предыдущим номером)
    Input: [0, -1, 5, 2, 3]
    Output: 2 (-1 < 5, 2 < 3)
    """
    print("ЗАДАЧА 23")
    from random import randint
    list_1 = [randint(-5, 5) for i in range(randint(5, 10))]
    print(list_1)
    list_2 = []
    total = 0
    for i in range(len(list_1)-1):
        if list_1[i] < list_1[i+1]:
            list_2.append(f"{list_1[i]} < {list_1[i+1]}")
            total+=1
    print(f"{total} {list_2}")
    Py_Sem()

Py_Sem()